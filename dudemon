#!/usr/bin/env python

try :
	import simplejson as json
except ImportError :
	import json

import traceback
import time
import os.path
import sys
import mediorc
import datediff
import dudeutils
import re

class DudeCore(object) :
	WORK_DAY = 8 * 3600
	MUST_HAVE_ALREADY_LEFT = 24 * 3600

	def __init__(self, nick, statefile, ctakey=None, pp_bind=None, pp_connect=None) :
		self.nick = nick
		self.statefile = statefile
		self.ctakey = ctakey
		if self.ctakey :
			import ordat.cta
			self.train = ordat.cta.Train(key=self.ctakey)
		if pp_bind or pp_connect :
			from zmqfan import zmqsub
			import sync_logic, transmission

		src = None
		if pp_bind :
			src = zmqsub.BindSub(pp_bind)
		elif pp_connect :
			src = zmqsub.ConnectSub(pp_connect)

		self.nv = None
		if src :
			self.nv = sync_logic.NetworkView()
			self.ct = transmission.ConsumerThread(src, self.nv)
			self.ct.start()
		
		self.load()

	def stop_hook(self) :
		if hasattr(self, 'ct') :
			self.ct.stop()

	def read(self) :
		if os.path.exists(self.statefile) :
			fh = open(self.statefile, 'r')
			try :
				return json.load(fh)
			finally :
				fh.close()
		else :
			return {}

	def write(self, state) :
		if os.path.exists(self.statefile) :
			f = self.statefile + '.bak'
			os.rename(self.statefile, f)
		
		# TODO handle inability to write, or open, or close? Restore .bak file? What if that fails?
		fh = open(self.statefile, 'w')
		try :
			json.dump(state, fh)
		finally :
			fh.close()

	def load(self) :
		self.state = self.read()

	def dump(self) :
		self.write(self.state)

	def sanitize(self, nick) :
		lowchar = ''.join([c for c in nick.lower() if c in [chr(i + ord('a')) for i in range(26)]])
		if lowchar :
			return lowchar
		return nick

	def complain_nothere(self, now, who) :
		if not who in self.state or 'e' not in self.state[who] :
			return 'you never said you were here!'

		if now < self.state[who]['s'] :
			return 'you are not even here yet!'

		how_long = datediff.differ(now - self.state[who]['s'])
		
		if now > self.state[who]['e'] + DudeCore.MUST_HAVE_ALREADY_LEFT :
			return 'what, do you live here? That would mean you\'ve been here for %s' % how_long

	def handle_pm(self, nick, text) :
		words = [w for w in text.split(' ') if w]
		who = self.sanitize(nick)

		try :
			if not words :
				return "What?"

			if words[0] == '!addmac' :
				
				if who not in self.state :
					return "You gotta add yourself."
				if len(words) == 2 :
					sanitized_mac = words[1].lower().replace('.', ':').replace('-', ':')
					maccheck = re.compile('^[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}$')
					if not maccheck.match(sanitized_mac) :
						return "That aint a mac address. Get outta here."
					
					self.state[who].setdefault('macs', [])

					if sanitized_mac in self.state[who]['macs'] :
						return "Already got that, duderino."
					
					self.state[who]['macs'].append(sanitized_mac)
					self.dump()
					return "Noted."
				else :
					return "I just need the mac address. That's it."
		except :
			traceback.print_exc()
			return "You're raising exceptions, %s. Don't worry, I still like you." % who

	def handle(self, nick, text) :
		words = [w for w in text.split(' ') if w]
		who = self.sanitize(nick)

		chg = False
		cmds = ('!add', '!next', '!time', '!sched', '!here', '!bye', '!whom', '!when')
		stillhere_cmds = ['!stillhere', '!chilling', '!chillin', '!hanging', '!hangin']
		L_cmds = ['!l', '!el']

		cmds = cmds + tuple(stillhere_cmds) + tuple(L_cmds)

		try :
			now = int(time.time())
			if not words :
				return
			
			cmd = words[0].lower()
			if cmd in cmds :
				if cmd == '!add' :
					self.state.setdefault(who, {})
					chg = True
					return 'ok, %s' % who
				elif cmd in ['!next', '!time'] :
					try :
						about = self.sanitize(words[1])
					except IndexError :
						about = who
					if about == self.nick :
						return "I should be here until the end of time"
					
					ud = self.state.get(about, dict()) # get user data
					if 's' in ud and 'e' in ud :
						s = ud['s']
						e = ud['e']
						if e < now :
							return '%s left about %s ago' % (about, datediff.differ(now - e))
						elif s > now :
							return '%s will get here in %s' % (about, datediff.differ(s - now))
						else :
							return '%s has been here for %s, should be here for another %s' % (about, datediff.differ(now - s), datediff.differ(e - now))
					else :
						return "sorry, I don't know when %s will be around" % about
				elif cmd == '!when' :
					try :
						n = int(words[1])
						if n < 1 :
							raise ValueError
					except IndexError :
						n = 1
					except ValueError :
						return 'usage: !when <n_events>'


					if n > 5 :
						return 'Hey now, are you a stalker or something? Get out of here.'
					
					return dudeutils.when(self.state, now, count=n)
				elif cmd == '!whom' :
					try :
						when = now + datediff.dur2sec(words[1])
					except IndexError :
						when = now
					except datediff.Bad :
						return 'usage: !whom [how_long_in_future] format is hours:minutes'

					return "As far as I know, %s" % dudeutils.whom(self.state, now, when, nv=self.nv)
				elif cmd == '!sched' :
					if who not in self.state :
						return 'sorry, you must !add yourself first'
					
					try :
						until_in = datediff.dur2sec(words[1])
						if (len(words) < 3) :
							dur_in = DudeCore.WORK_DAY
						else :
							dur_in = datediff.dur2sec(words[2])
					except IndexError :
						return 'usage: !sched <until_in> [duration_in] - formats are hours:minutes'
					except datediff.Bad :
						return 'usage: !sched <until_in> [duration_in] - formats are hours:minutes'

					if dur_in > 24 * 3600 :
						return 'What, do you live here?'

					when_in = now + until_in
					when_out = when_in + dur_in
					self.state[who]['u'] = now
					self.state[who]['s'] = when_in
					self.state[who]['e'] = when_out

					bump = dudeutils.overlap(self.state, self.state[who]['s'], self.state[who]['e'])
					if who in bump :
						bump.remove(who)

					if bump :
						append = '. You\'ll probably run into %s.' % dudeutils.oxford(bump)
					else :
						append = ''

					chg = True
					return 'See you for %s in %s, %s%s' % (datediff.differ(dur_in), datediff.differ(until_in), who, append)
				elif cmd == '!bye' :
					reason_failed = self.complain_nothere(now, who)
					if reason_failed is not None :
						return reason_failed

					how_long = datediff.differ(now - self.state[who]['s'])
					self.state[who]['e'] = now
					chg = True
					return 'bye, %s! You were here for %s' % (who, how_long)
				elif cmd in L_cmds :
					if not hasattr(self, 'train') :
						return None

					try :
						station = words[1]
						if len(station) < 3 :
							return 'I need a station name.'
					except IndexError :
						return 'I need a station name.'

					if ':' in station :
						station, line = station.split(':', 1)
					else :
						line = None

					import ordat.cta, ordat.cta.apis
					if line == None :
						lines = set(ordat.cta.Line.all)
					else :
						lines = set(ordat.cta.Line.find(line))

					stations = [stat for stat in ordat.cta.Station.find(station) if set(stat.lines).intersection(lines)]
					if len(stations) > 1 :
						return 'That matches too many stations.'
					if len(stations) == 0 :
						return 'Station not found.'

					# TODO ask a question like 'do you mean the one further north?' or similar. accept mapid= type values as station name.
					try :
						arrivals = [arr for arr in stations[0].arrivals() if arr.line in lines]
						if not arrivals :
							return "I don't see trains for %s" % stations[0]
						else :
							r = []
							for arrival in arrivals :
								tsdiff = long(arrival.arrives_ts - time.time())
								if tsdiff < 0 :
									when = datediff.differ(abs(tsdiff)) + ' ago'
								elif tsdiff == 0 :
									when = 'now'
								else :
									when = 'in ' + datediff.differ(tsdiff)
								r.append('%s%d%s (%s)%s' % (chr(3), arrival.line.unixcolor, str(arrival), when, chr(3)))
							return r
					except ordat.cta.apis.Failure, f :
						return 'CTA API failure: %s' % f.args[0]
				elif cmd in (['!here'] + stillhere_cmds) :
					if who not in self.state :
						return 'sorry, you must !add yourself first'

					still = cmd in stillhere_cmds

					try :
						dur_in = datediff.dur2sec(words[1])
					except IndexError :
						dur_in = None
					except datediff.Bad :
						return 'usage: !here [duration_in] - format is hours:minutes'

					if dur_in is None :
						if 's' in self.state[who] and 'e' in self.state[who] :
							dur_in = self.state[who]['e'] - self.state[who]['s']
						else :
							dur_in = DudeCore.WORK_DAY

						if still :
							return 'usage: !stillhere duration_in - format is hours:minutes'

					if dur_in > 7 * 24 * 3600 :
						return 'What, do you live here?'

					additional = None
					if not still and 'u' in self.state[who] and self.state[who]['u'] != self.state[who]['s'] :
						u = self.state[who]['u']
						s = self.state[who]['s']
						e = self.state[who]['e']

						# analyze how accurate the !sched prediction made was
						# expected diff, actual diff, and the diff between them
						e_d = s - u
						a_d = now - u
						d_d = e_d - a_d

						if abs(a_d) < abs(e - s) :
							if d_d > 0 :
								term = 'early'
							else :
								term = 'late'
							percent = 100 * (1.0 * abs(d_d) / abs(e_d))

							if d_d == 0 :
								additional = 'like clockwork'
							else :
								additional = '%s %s - a %0.1f%% error' % (datediff.differ(abs(d_d)), term, percent)

					if still :
						reason_failed = self.complain_nothere(now, who)
						if reason_failed is not None :
							return reason_failed
						additional_durst = 'another '
					else :
						additional_durst = ''

					self.state[who]['u'] = now
					if not still :
						self.state[who]['s'] = now
					self.state[who]['e'] = now + dur_in
					chg = True
					
					duration_statement = "I guess you'll be here for %s%s or so." % (additional_durst, datediff.differ(dur_in))

					if additional :
						return 'hello %s, you\'re %s. %s' % (who, additional, duration_statement)
					else :
						return 'hello, %s. %s' % (who, duration_statement)
		except :
			traceback.print_exc()
			return "You're raising exceptions, %s. Don't worry, I still like you." % who
		finally :
			if chg :
				self.dump()

class DudemonBot(mediorc.IRC) :
	def __init__(self, server, nick, chan, core) :
		self.core = core
		mediorc.IRC.__init__(self, server, nick, chan)
	
	def on_join(self, c, e) :
		self.initialize_pinger()

	def on_privmsg(self, c, e) :
		nick = e.source().split("!")[0]
		txt = e.arguments()[0]
		
		rmsg = self.core.handle_pm(nick, txt)
		if rmsg :
			self.connection.privmsg(nick, rmsg)

	def on_pubmsg(self, c, e) :
		nick = e.source().split("!")[0]
		chan = e.target()
		txt = e.arguments()[0]

		rmsg = self.core.handle(nick, txt)
		if rmsg :
			if isinstance(rmsg, basestring) :
				rmsg = [rmsg]
			for msg in rmsg :
				self.connection.privmsg(chan, msg)

class DudemonThread(mediorc.IRCThread) :
	def __init__(self, server, nick, chan, core) :
		self.bot_create = lambda: DudemonBot(server, nick, chan, core)
		self.stop_hook = core.stop_hook
		mediorc.IRCThread.__init__(self)

import sys, optparse

if __name__ == '__main__' :
	parser = optparse.OptionParser()
	parser.add_option('--pp-bind', dest='bind_zmq_url', default=None, help="ZMQ url to bind to for pamela_probe.")
	parser.add_option('--pp-connect', dest='connect_zmq_url', default=None, help="ZMQ url to connect to for pamela_probe.")
	parser.add_option('--ctakey', dest='ctakey', default=None, help="CTA API key for use with !el")
	
	(opts, args) = parser.parse_args()
	try :
		server, nick, chan, statefile = args

	except IndexError :
		print 'usage: dudemon <server> <nick> <channel> <statefile> [<cta train tracker api key>]'
		sys.exit(1)

	if opts.connect_zmq_url and opts.bind_zmq_url :
		print 'you cannot use both --pp-bind and --pp-connect.'
		sys.exit(1)

	core = DudeCore(nick, statefile, ctakey=opts.ctakey, pp_bind=opts.bind_zmq_url, pp_connect=opts.connect_zmq_url)
	s = DudemonThread(server, nick, chan, core)
	try :
		s.run()
	except KeyboardInterrupt :
		s.stop()
